#!/bin/bash
#
#   Script to retrieve info about speakers.
#

default_source_id() {
    echo $(stdbuf -oL pactl -f json list sources | jq ".[] | select(.name == \"$(pactl get-default-source)\") | .index")
}

get_percent() {
    local volume=$(pactl --format=json list sources | \
                   jq "[.[] | select(.index == $(default_source_id)) | \
                        .volume | \
                        .[] | \
                        .value_percent | \
                        match(\"[0-9]*\") | \
                        .string | \
                        tonumber] | \
                        add/length")

    echo $volume
}

get_mute() {
    local mute=$(pactl --format=json list sources | \
                   jq ".[] | select(.index == $(default_source_id)) | .mute")

    echo $mute
}

percent() {

    local source_id=$(default_source_id)
    echo $(get_percent)

    stdbuf -oL pactl subscribe | grep --line-buffered -E "^Event 'change' on source #$source_id" | while read -r line; do
        local percent=$(get_percent)

        if [[ -n $1 && $1 == "capped" && $percent -gt 100 ]]; then
            echo 100
        else
            echo $percent
        fi
    done
}

mute() {
    stdbuf -oL amixer events | grep --line-buffered -E "^event value:.*'Capture Switch'" | while read -r line; do
        echo $(get_mute)
    done
}

mute_toggle() {
    amixer set Capture toggle &> /dev/null
}

if [[ -n $1 && $1 == "id" && -z $2 ]]; then
    echo $(default_source_id)
elif [[ -n $1 && $1 == "percent" && -z $2 ]]; then
    percent
elif [[ -n $1 && $1 == "percent" && -n $2 && $2 == "capped" ]]; then
    percent capped
elif [[ -n $1 && $1 == "mute" && -z $2 ]]; then
    mute
elif [[ -n $1 && $1 == "mute" && -n $2 && $2 == "toggle" ]]; then
    mute_toggle
fi
