#!/bin/bash
#
#   Simple algorithm to create weather widget. It retrieves data from
#   open-meteo.com API.
#

FETCH_URL="https://api.open-meteo.com/v1/forecast?latitude=45.5921&longitude=9.5734&hourly=temperature_2m,precipitation,cloudcover&timeformat=unixtime&forecast_days=3"
LOG_FILE="$HOME/.weather.log"
DATA="/tmp/forecast.json"
RECORDS_INTERVAL=3600                                                                   # Records come at intervals of 1h -> 3600s

# Logs a message with a log level
#
# Syntax:
#   log LEVEL message
#
function log() {

    if [[ -n $1 && -n $2 ]]; then 
        printf '[%s] [%s] %s:%s\n' "$(date '+%FT%R')" "$1" "$BASH_LINENO" "$2" >> $LOG_FILE
    fi

    return 0
}

# Fetch data from API.
function fetch() {

    log "INFO" "fetching new data from $FETCH_URL..."
    curl -o $DATA "$FETCH_URL"

    exit_code=$?

    [[ $exit_code != 0 ]] && local severity="ERROR" || local severity="INFO"
    log "$severity" "Data fetch completed with exit code: $exit_code"

    return $exit_code
}

# Returns the time of the record that will be used 
# to forecast weather. The record that will be choosen 
# is the one closer to current time.
function forecast_time() {
    local time=$(date +%s)                                                              # Current time
    let "delta = $time % $RECORDS_INTERVAL"                                             # Delta between time and next hour

    if   [[ $delta == 0 ]]; then                                                        # No delta
        echo $time
        return 0
    elif [[ "$delta" -gt 0 && "$delta" -lt "($RECORDS_INTERVAL / 2)" ]]; then           # time closer to prev hour (floor)
        echo $(( $time - $delta ))
        return 0
    elif [[ "$delta" -ge "($RECORDS_INTERVAL / 2)" ]]; then                             # time closer to next hour (ceil)
        echo $(( $time + ($RECORDS_INTERVAL - $delta) ))
        return 0
    fi

    log "ERROR" "returning null"
    return -1
}

# Returns the array index of the record that will be 
# used to forecast weather. The index is retreved from 
# the time array as:
#
#   time.indexOf(forecast_time)
#
# Syntax:
#   record_index forecast_time
#
function record_index() {
    
    if [[ -n $1 ]]; then

        # Fetch data if it hasn't been done before
        if [[ ! -f $DATA ]]; then
            log "INFO" "file $DATA is missing"
            fetch
            [[ $? != 0 ]] && return -1
        fi

        local exit="false"
        while [[ $exit == "false" ]]; do

            local index=$(cat $DATA | jq ".hourly | .time | index($1)")

            # forecast_time is not in the list
            if [[ "$index" == "null" || -z "$index" ]]; then

                local first_elem=$(cat $DATA | jq '.hourly | .time[0]')
                local last_elem=$(cat $DATA | jq '.hourly | .time[-1]')

                if   [[ "$1" -lt "$first_elem" ]]; then                                 # forecast_time is older than first record -> an error occurred
                    log "ERROR" "time $1 is older than first element ($first_elem)"
                    return -1
                elif [[ "$1" -gt "$last_elem" ]]; then                                  # forecast_time is newer than last record -> fetch new data
                    log "INFO" "time $1 is newer than last element"
                    fetch
                    [[ $? != 0 ]] && return -1
                elif [[ "$1" -ge "$first_elem" && "$1" -le "$last_elem" ]]; then        # forecast_time is not aligned or some record is missing -> an error occurred
                    log "ERROR" "time $1 is not aligned or some record is missing"
                    return -1
                fi

            else
                exit="true"
            fi
        done

        if [[ "$index" == "null" || -z "$index" ]]; then
            log "ERROR" "returning null"
            return -1
        fi

        echo $index
        return 0
    fi

    log "WARN" "missing argument"
    return -1
}

# Returns temperature record at provided index.
#
# Syntax:
#   temperature index
#
function temperature() {
    
    if [[ -n $1 ]]; then

        local temp=$(cat $DATA | jq ".hourly | .temperature_2m[$1]")

        if [[ $temp != -* ]]; then
            temp="+$temp"
        fi

        echo $temp
    else
        log "WARN" "missing argument"
    fi

    return 0
}

# Returns precipitation forecast at provided index.
#
# Syntax:
#   precipitation index
#
function precipitation() {

    if [[ -n $1 ]]; then
        echo $(cat $DATA | jq ".hourly | .precipitation[$1]")
    else
        log "WARN" "missing argument"
    fi

    return 0
}

# Returns cloudcover forecast at provided index.
#
# Syntax:
#   cloudcover index
#
function cloudcover() {

    if [[ -n $1 ]]; then
        echo $(cat $DATA | jq ".hourly | .cloudcover[$1]")
    else
        log "WARN" "missing argument"
    fi

    return 0
}

# Returns weather forecast based on current time
function forecast() {
    
    local forecast_time=$(forecast_time)
    [[ $? != 0 ]] && return -1

    local index=$(record_index $forecast_time)
    [[ $? != 0 ]] && return -1
 
    local temp=$(temperature $index)
    local rain=$(precipitation $index)
    local clouds=$(cloudcover $index)

    if   [[ "$rain" == 0 && "$clouds" -le 30 ]]; then
        local icon="󰖙 "    # sunny
    elif [[ "$rain" == 0 && "$clouds" -gt 30 && "$clouds" -lt 50 ]]; then
        local icon="󰖕 "    # soft clouds
    elif [[ "$rain" == 0 && "$clouds" -ge 50 ]]; then
        local icon="󰖐 "    # clouds
    elif [[ "$rain" -gt 0 && "$rain" -lt 4 ]]; then
        local icon="󰖗 "    # soft rain
    elif [[ "$rain" -ge 4 ]]; then
        local icon="󰖖 "    # rain
    fi

    echo "${temp}°C $icon"
    return 0
}

forecast
