#!/bin/bash

# PipeWire default sink id
function sink_id() {
    sinkId=$(pactl --format=json list sinks | \
             jq ".[] | select(.name == \"$(pactl get-default-sink)\") | 
                 .properties | 
                 .[\"object.id\"] | 
                 tonumber")

    echo $sinkId
}

# PipeWire default source id
function source_id() {
    sourceId=$(pactl --format=json list sources | \
               jq ".[] | select(.name == \"$(pactl get-default-source)\") | 
                   .properties | 
                   .[\"object.id\"] | 
                   tonumber")

    echo $sourceId
}


function percent() {

    local nodeId=""
    local nodeType=""

    if   [[ -n $1 && $1 == "input" ]]; then
        nodeId=$(source_id)
        nodeType="source"
    elif [[ -n $1 && $1 == "output" ]]; then
        nodeId=$(sink_id)
        nodeType="sink"
    elif [[ -z $1 || $1 == "output" ]]; then
        # Log something
        echo "missing arguments"
        return
    fi

    pactl subscribe | grep --line-buffered -E "^Event 'change' on $nodeType #$nodeId" | \
    while read line; do
        
        local percent=$(wpctl get-volume $nodeId | awk '{ print $2 * 100 }')

        if [[ -n $2 && $2 == "capped" && $percent -gt 100 ]]; then
            echo "100"
        else
            echo $percent
        fi

        [[ $nodeType == "source" ]] && nodeId=$(source_id)
        [[ $nodeType == "sink"   ]] && nodeId=$(sink_id)

    done
}

function mute() {
  
    local nodeId=""
    local nodeType=""

    if   [[ -n $1 && $1 == "input" ]]; then
        nodeId=$(source_id)
        nodeType="source"
    elif [[ -n $1 && $1 == "output" ]]; then
        nodeId=$(sink_id)
        nodeType="sink"
    elif [[ -z $1 || $1 == "output" ]]; then
        # Log something
        echo "missing arguments"
        return
    fi

    if   [[ -n $2 && $2 == "status" ]]; then
        
        pactl subscribe | grep --line-buffered -E "^Event 'change' on $nodeType #$nodeId" | \
        while read line; do
            
            echo $(pactl --format=json list ${nodeType}s | jq ".[] | select(.name == \"$(pactl get-default-${nodeType})\") | .mute")
        
            [[ $nodeType == "source" ]] && nodeId=$(source_id)
            [[ $nodeType == "sink"   ]] && nodeId=$(sink_id)

        done
    elif [[ -n $2 && $2 == "toggle" ]]; then
        wpctl set-mute $nodeId toggle
    fi
}

command=""
target=""
args=""

# Check first argument
if [[ -n $1 && ($1 == "input" || $1 == "output") ]]; then
    target=$1
else
    # Log something
    echo "missing arguments"
    exit
fi

# Check second argument
if [[ -n $2 && ($2 == "mute" || $2 == "percent") ]]; then
    command=$2
else
    # Log something
    echo "missing arguments"
    exit
fi

# Check third argument
if   [[ -n $3 && (($command == "mute"    && ($3 == "status" || $3 == "toggle")) ||
                  ($command == "percent" &&  $3 == "capped")) ]]; then
    args=$3
elif [[ (-n $3 && (($command == "mute"    && ($3 != "status" || $3 != "toggle")) ||
                   ($command == "percent" &&  $3 != "capped"))) ||
        (-z $3 &&   $command == "mute") ]]; then
    # Log something
    echo "bad arguments"
    exit
fi

$command $target $args
