#!/bin/bash

# PipeWire default sink id
function sink_id() {
    sinkId=$(pactl --format=json list sinks | \
             jq ".[] | select(.name == \"$(pactl get-default-sink)\") | 
                 .properties | 
                 .[\"object.id\"] | 
                 tonumber")

    echo $sinkId
}

# PipeWire default source id
function source_id() {
    sourceId=$(pactl --format=json list sources | \
               jq ".[] | select(.name == \"$(pactl get-default-source)\") | 
                   .properties | 
                   .[\"object.id\"] | 
                   tonumber")

    echo $sourceId
}

# Returns volume percent of audio input (microphone) 
# or output (speakers).
# Function output can be capped (i.e. if volume goes
# over 100% the output will not).
#
#   Syntax:
#       percent input|output [capped]
#
function percent() {

    # Check if percent should be capped
    [[ -n $2 && $2 == "capped" ]] && local isCapped=true || local isCapped=false

    # Pick between input and output
    local nodeId=""
    local nodeType=""

    if   [[ -n $1 && $1 == "input" ]]; then
        nodeId=$(source_id)
        nodeType="source"
    elif [[ -n $1 && $1 == "output" ]]; then
        nodeId=$(sink_id)
        nodeType="sink"
    else
        return
    fi

    # Print current percent
    local percent=$(wpctl get-volume $nodeId | awk '{ print $2 * 100 }')
    
    if [[ $isCapped == "true" && $percent -gt 100 ]]; then 
        echo "100"
    else 
        echo $percent
    fi

    # Listen for events and update percent
    pactl subscribe | grep --line-buffered -E "^Event 'change' on $nodeType #$nodeId" | \
    while read line; do
        
        percent=$(wpctl get-volume $nodeId | awk '{ print $2 * 100 }')

        if [[ $isCapped == "true" && $percent -gt 100 ]]; then
            echo "100"
        else
            echo $percent
        fi

        # Update nodeId every loop (it can change over time)
        [[ $nodeType == "source" ]] && nodeId=$(source_id)
        [[ $nodeType == "sink"   ]] && nodeId=$(sink_id)

    done
}

# Either returns mute status or toggles mute for 
# audio input/output.
#   
#   Syntax:
#       mute input|output toggle|status
#
function mute() {
  
    # Pick between input and output
    local nodeId=""
    local nodeType=""

    if   [[ -n $1 && $1 == "input" ]]; then
        nodeId=$(source_id)
        nodeType="source"
    elif [[ -n $1 && $1 == "output" ]]; then
        nodeId=$(sink_id)
        nodeType="sink"
    else
        return
    fi

    if   [[ -n $2 && $2 == "status" ]]; then
       
        # Print current mute status
        echo $(pactl --format=json list ${nodeType}s | jq ".[] | select(.name == \"$(pactl get-default-${nodeType})\") | .mute")

        # Listen for events and update mute status
        pactl subscribe | grep --line-buffered -E "^Event 'change' on $nodeType #$nodeId" | \
        while read line; do
            
            echo $(pactl --format=json list ${nodeType}s | jq ".[] | select(.name == \"$(pactl get-default-${nodeType})\") | .mute")
        
            # Update nodeId every loop (it can change over time)
            [[ $nodeType == "source" ]] && nodeId=$(source_id)
            [[ $nodeType == "sink"   ]] && nodeId=$(sink_id)

        done
    elif [[ -n $2 && $2 == "toggle" ]]; then
        wpctl set-mute $nodeId toggle
    fi
}

command=$2      # percent|mute
target=$1       # input|output
args=$3         # toggle|status|capped

$command $target $args
